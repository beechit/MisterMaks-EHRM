{namespace k=TYPO3\Kickstart\ViewHelpers}<?php
namespace {packageNamespace}<f:if condition="{isInSubpackage}">\{subpackage}</f:if>\Controller;

/*                                                                        *
 * This source file is proprietary property of Beech Applications B.V.
 * All code (c) Beech Applications B.V. all rights reserved
 *                                                                        */

use TYPO3\Flow\Annotations as Flow;
use {modelFullClassName};

/**
* {controllerName} controller for the {packageKey} package <f:if condition="{isInSubpackage}"> and subpackage {subpackage}</f:if>
*
* @Flow\Scope("singleton")
*/
class {controllerClassName} extends \Beech\Ehrm\Controller\AbstractManagementController {

	/**
	 * @var string
	 */
	protected $entityClassName = '{packageNamespace}\Domain\Model\{modelName}';

	/**
	 * @var string
	 */
	protected $repositoryClassName = '{packageNamespace}\Domain\Repository\{modelName}Repository';

	/**
	* Adds the given new <k:inflect.humanizeCamelCase lowercase="true">{modelName}</k:inflect.humanizeCamelCase> object to the <k:inflect.humanizeCamelCase lowercase="true">{modelName}</k:inflect.humanizeCamelCase> repository
	*
	* @param {modelFullClassName} $new<k:uppercaseFirst>{modelName}</k:uppercaseFirst> A new <k:inflect.humanizeCamelCase lowercase="true">{modelName}</k:inflect.humanizeCamelCase> to add
	* @return void
	*/
	public function createAction({modelClassName} ${entity}) {
		$this->repository->add(${entity});
		$this->documentManager->merge(${entity}->getDocument());
		$this->addFlashMessage('Created a new {entity}');
		$this->redirect('list');
	}

	/**
	* Shows a single <k:inflect.humanizeCamelCase lowercase="true">{modelName}</k:inflect.humanizeCamelCase> object
	*
	* @param {modelFullClassName} ${modelName} The <k:inflect.humanizeCamelCase lowercase="true">{modelName}</k:inflect.humanizeCamelCase> to show
	* @return void
	*/
	public function showAction({modelClassName} ${entity}) {
		$this->view->assign('{entity}', ${entity});
	}

	/**
	* Updates the given <k:inflect.humanizeCamelCase lowercase="true">{modelName}</k:inflect.humanizeCamelCase> object
	*
	* @param {modelFullClassName} ${modelName} The <k:inflect.humanizeCamelCase lowercase="true">{modelName}</k:inflect.humanizeCamelCase> to update
	* @return void
	*/
	public function updateAction({modelClassName} ${entity}) {
		$this->repository->update(${entity});
		$this->addFlashMessage('Updated the <k:inflect.humanizeCamelCase lowercase="true">{modelName}</k:inflect.humanizeCamelCase>.');
		$this->redirect('list');
	}

	/**
	* Shows a form for editing an existing <k:inflect.humanizeCamelCase lowercase="true">{modelName}</k:inflect.humanizeCamelCase> object
	*
	* @param {modelFullClassName} ${modelName} The <k:inflect.humanizeCamelCase lowercase="true">{modelName}</k:inflect.humanizeCamelCase> to edit
	* @return void
	*/
	public function editAction({modelClassName} ${entity}) {
		$this->view->assign('{entity}', ${entity});
	}

	/**
	* Removes the given <k:inflect.humanizeCamelCase lowercase="true">{modelName}</k:inflect.humanizeCamelCase> object from the <k:inflect.humanizeCamelCase lowercase="true">{modelName}</k:inflect.humanizeCamelCase> repository
	*
	* @param {modelFullClassName} ${modelName} The <k:inflect.humanizeCamelCase lowercase="true">{modelName}</k:inflect.humanizeCamelCase> to delete
	* @return void
	*/
	public function deleteAction({modelClassName} ${entity}) {
		$this->repository->remove(${entity});
		$this->redirect('list');
	}

}

?>